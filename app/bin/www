const app = require('../app');
const http = require('http');
const {
    isDev
} = require('../lib/utils');
const models = require('../models');

const normalizePort = (val) => {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
const port = normalizePort(process.env.PORT || '3000');
const server = http.createServer(app);
const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
const onListening = () => {
    let addr = server.address();
    let bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    console.log('------------ 环境已启动 ------------');
    console.log(`-------- isDev: ${isDev} --------`);
    console.log(`open 127.0.0.1:${addr.port}`);
    console.log('------------ 环境已启动 ------------');
}

models.sequelize.sync().then(function () {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

module.exports = app;